digraph G {
    page="40,60"; 
    ratio=auto;
    rankdir=LR;
    fontsize=10;
   "Elmah.AboutPage" -> { rank=none; "Elmah.Build"; "Elmah.ErrorLog"; "Elmah.ErrorPageBase"; "Elmah.SccStamp"; "Elmah.SpeedBar" }
   "Elmah.AccessErrorLog" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ConnectionStringHelper"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.ManifestResourceHelper"; "Elmah.Mask" }
   "Elmah.Assertions.AssertionFactory" -> { rank=none; "Elmah.Assertions.AssertionFactoryHandler"; "Elmah.Assertions.ComparisonAssertion"; "Elmah.Assertions.ComparisonResults"; "Elmah.Assertions.IAssertion"; "Elmah.Assertions.IContextExpression"; "Elmah.Assertions.IsNullAssertion"; "Elmah.Assertions.JScriptAssertion"; "Elmah.Assertions.LogicalAssertion"; "Elmah.Assertions.RegexMatchAssertion"; "Elmah.Assertions.StaticAssertion"; "Elmah.Assertions.TypeAssertion"; "Elmah.Assertions.UnaryNotAssertion"; "Elmah.Assertions.WebDataBindingExpression"; "Elmah.Mask"; "Elmah.StringTranslation" }
   "Elmah.Assertions.AssertionFactoryHandler" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.ComparisonAssertion" -> { rank=none; "Elmah.Assertions.ComparisonResultPredicate"; "Elmah.Assertions.DataBoundAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.ComparisonResults" -> { rank=none; "Elmah.Assertions.ComparisonResultPredicate" }
   "Elmah.Assertions.CompositeAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.DataBoundAssertion" -> { rank=none; "Elmah.Assertions.IAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.DelegatedContextExpression" -> { rank=none; "Elmah.Assertions.ContextExpressionEvaluationHandler" }
   "Elmah.Assertions.IsNullAssertion" -> { rank=none; "Elmah.Assertions.DataBoundAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.JScriptAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.LogicalAssertion" -> { rank=none; "Elmah.Assertions.CompositeAssertion"; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.RegexMatchAssertion" -> { rank=none; "Elmah.Assertions.DataBoundAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.StaticAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.TypeAssertion" -> { rank=none; "Elmah.Assertions.ContextExpressionEvaluationHandler"; "Elmah.Assertions.DataBoundAssertion"; "Elmah.Assertions.DelegatedContextExpression"; "Elmah.Assertions.IContextExpression"; "Elmah.DataBinder"; "Elmah.ExceptionFilterEventArgs" }
   "Elmah.Assertions.UnaryNotAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.WebDataBindingExpression" -> { rank=none; "Elmah.Assertions.IContextExpression"; "Elmah.DataBinder"; "Elmah.Mask" }
   "Elmah.Build" -> { rank=none; "Elmah.ErrorLog" }
   "Elmah.ConfigurationSectionHelper" -> { rank=none; "Elmah.Mask" }
   "Elmah.ConnectionStringHelper" -> { rank=none; "Elmah.Configuration"; "Elmah.Mask" }
   "Elmah.ContentSyndication.Channel" -> { rank=none; "Elmah.ContentSyndication.Image"; "Elmah.ContentSyndication.TextInput" }
   "Elmah.ContentSyndication.RichSiteSummary" -> { rank=none; "Elmah.ContentSyndication.Channel" }
   "Elmah.DataBinder" -> { rank=none; "Elmah.Mask" }
   "Elmah.Environment" -> { rank=none; "Elmah.Mask" }
   "Elmah.Error" -> { rank=none; "Elmah.Environment"; "Elmah.Mask" }
   "Elmah.ErrorDetailPage" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorPageBase"; "Elmah.HttpStatus"; "Elmah.Mask"; "Elmah.SpeedBar" }
   "Elmah.ErrorDigestRssHandler" -> { rank=none; "Elmah.ContentSyndication.Channel"; "Elmah.ContentSyndication.Item"; "Elmah.ContentSyndication.RichSiteSummary"; "Elmah.Environment"; "Elmah.Error"; "Elmah.ErrorDisplay"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorLogPageFactory"; "Elmah.XmlSerializer"; "Elmah.XmlText" }
   "Elmah.ErrorDisplay" -> { rank=none; "Elmah.Error" }
   "Elmah.ErrorFilterConfiguration" -> { rank=none; "Elmah.Assertions.IAssertion"; "Elmah.Assertions.StaticAssertion" }
   "Elmah.ErrorFilterModule" -> { rank=none; "Elmah.Assertions.IAssertion"; "Elmah.Assertions.StaticAssertion"; "Elmah.Configuration"; "Elmah.ErrorFilterConfiguration"; "Elmah.ExceptionFilterEventArgs"; "Elmah.ExceptionFilterEventHandler"; "Elmah.HttpModuleRegistry"; "Elmah.IExceptionFiltering" }
   "Elmah.ErrorFilterSectionHandler" -> { rank=none; "Elmah.Assertions.AssertionFactory"; "Elmah.ErrorFilterConfiguration" }
   "Elmah.ErrorHtmlPage" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorPageBase"; "Elmah.HttpStatus"; "Elmah.Mask" }
   "Elmah.ErrorJson" -> { rank=none; "Elmah.Error"; "Elmah.JsonTextWriter" }
   "Elmah.ErrorJsonHandler" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ErrorJson"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.Mask" }
   "Elmah.ErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLogEntry"; "Elmah.Mask"; "Elmah.MemoryErrorLog"; "Elmah.ServiceCenter"; "Elmah.SimpleServiceProviderFactory"; "Elmah.SynchronousAsyncResult" }
   "Elmah.ErrorLogDataSourceAdapter" -> { rank=none; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.ErrorLogDownloadHandler" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorLogPageFactory"; "Elmah.JsonTextWriter"; "Elmah.Mask" }
   "Elmah.ErrorLogEntry" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog" }
   "Elmah.ErrorLogModule" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorLoggedEventArgs"; "Elmah.ErrorLoggedEventHandler"; "Elmah.ErrorSignal"; "Elmah.ErrorSignalEventArgs"; "Elmah.ErrorSignalEventHandler"; "Elmah.ExceptionFilterEventArgs"; "Elmah.ExceptionFilterEventHandler"; "Elmah.HttpModuleBase"; "Elmah.IExceptionFiltering" }
   "Elmah.ErrorLogPage" -> { rank=none; "Elmah.Environment"; "Elmah.Error"; "Elmah.ErrorDisplay"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorPageBase"; "Elmah.Mask"; "Elmah.SpeedBar" }
   "Elmah.ErrorLogPageFactory" -> { rank=none; "Elmah.AboutPage"; "Elmah.ErrorDetailPage"; "Elmah.ErrorDigestRssHandler"; "Elmah.ErrorHtmlPage"; "Elmah.ErrorJsonHandler"; "Elmah.ErrorLogDownloadHandler"; "Elmah.ErrorLogPage"; "Elmah.ErrorRssHandler"; "Elmah.ErrorXmlHandler"; "Elmah.HttpModuleRegistry"; "Elmah.HttpRequestSecurity"; "Elmah.IRequestAuthorizationHandler"; "Elmah.ManifestResourceHandler"; "Elmah.SecurityConfiguration"; "Elmah.TestException" }
   "Elmah.ErrorLoggedEventArgs" -> { rank=none; "Elmah.ErrorLogEntry" }
   "Elmah.ErrorLoggedEventHandler" -> { rank=none; "Elmah.ErrorLoggedEventArgs" }
   "Elmah.ErrorMailEventArgs" -> { rank=none; "Elmah.Error" }
   "Elmah.ErrorMailEventHandler" -> { rank=none; "Elmah.ErrorMailEventArgs" }
   "Elmah.ErrorMailHtmlFormatter" -> { rank=none; "Elmah.Error"; "Elmah.ErrorTextFormatter"; "Elmah.Mask"; "Elmah.PoweredBy" }
   "Elmah.ErrorMailModule" -> { rank=none; "Elmah.ApplicationException"; "Elmah.Configuration"; "Elmah.Error"; "Elmah.ErrorMailEventArgs"; "Elmah.ErrorMailEventHandler"; "Elmah.ErrorMailHtmlFormatter"; "Elmah.ErrorSignal"; "Elmah.ErrorSignalEventArgs"; "Elmah.ErrorSignalEventHandler"; "Elmah.ErrorTextFormatter"; "Elmah.ExceptionFilterEventArgs"; "Elmah.ExceptionFilterEventHandler"; "Elmah.HttpModuleBase"; "Elmah.IExceptionFiltering"; "Elmah.Mask" }
   "Elmah.ErrorPageBase" -> { rank=none; "Elmah.ErrorLog"; "Elmah.Mask"; "Elmah.PoweredBy" }
   "Elmah.ErrorRssHandler" -> { rank=none; "Elmah.ContentSyndication.Channel"; "Elmah.ContentSyndication.Item"; "Elmah.ContentSyndication.RichSiteSummary"; "Elmah.Environment"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorLogPageFactory"; "Elmah.XmlSerializer"; "Elmah.XmlText" }
   "Elmah.ErrorSignal" -> { rank=none; "Elmah.ErrorSignalEventHandler" }
   "Elmah.ErrorSignalEventArgs" -> { rank=none; "Elmah.Mask" }
   "Elmah.ErrorSignalEventHandler" -> { rank=none; "Elmah.ErrorSignalEventArgs" }
   "Elmah.ErrorTextFormatter" -> { rank=none; "Elmah.Error" }
   "Elmah.ErrorTweetModule" -> { rank=none; "Elmah.ApplicationException"; "Elmah.Configuration"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorSignal"; "Elmah.ErrorSignalEventArgs"; "Elmah.ErrorSignalEventHandler"; "Elmah.ExceptionFilterEventArgs"; "Elmah.ExceptionFilterEventHandler"; "Elmah.HttpModuleBase"; "Elmah.IExceptionFiltering"; "Elmah.Mask"; "Elmah.StringFormatter" }
   "Elmah.ErrorXml" -> { rank=none; "Elmah.ApplicationException"; "Elmah.Error"; "Elmah.Mask" }
   "Elmah.ErrorXmlHandler" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.Mask" }
   "Elmah.ExceptionFilterEventHandler" -> { rank=none; "Elmah.ExceptionFilterEventArgs" }
   "Elmah.FixIIS5xWildcardMappingModule" -> { rank=none; "Elmah.ErrorLogPageFactory" }
   "Elmah.HttpModuleBase" -> { rank=none; "Elmah.HttpModuleRegistry" }
   "Elmah.HttpModuleRegistry" -> { rank=none; "Elmah.ApplicationException" }
   "Elmah.HttpStatus" -> { rank=none; "Elmah.Mask" }
   "Elmah.IExceptionFiltering" -> { rank=none; "Elmah.ExceptionFilterEventHandler" }
   "Elmah.JsonTextWriter" -> { rank=none; "Elmah.Mask" }
   "Elmah.ManifestResourceHandler" -> { rank=none; "Elmah.ManifestResourceHelper" }
   "Elmah.MemoryErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.Mask" }
   "Elmah.MsAjaxDeltaErrorLogModule" -> { rank=none; "Elmah.ErrorSignal" }
   "Elmah.MySqlErrorLog" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ConnectionStringHelper"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.Mask" }
   "Elmah.OracleErrorLog" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ConnectionStringHelper"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.Mask" }
   "Elmah.PgsqlErrorLog" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ConnectionStringHelper"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.Mask" }
   "Elmah.PoweredBy" -> { rank=none; "Elmah.Mask" }
   "Elmah.SQLiteErrorLog" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ConnectionStringHelper"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.Mask" }
   "Elmah.SccAttribute" -> { rank=none; "Elmah.Mask" }
   "Elmah.SccStamp" -> { rank=none; "Elmah.ReverseComparer"; "Elmah.SccAttribute" }
   "Elmah.SecurityConfiguration" -> { rank=none; "Elmah.Configuration"; "Elmah.Mask"; "Elmah.StringTranslation" }
   "Elmah.ServiceCenter" -> { rank=none; "Elmah.ServiceContainer"; "Elmah.ServiceProviderQueryHandler" }
   "Elmah.ServiceContainer" -> { rank=none; "Elmah.ErrorLog" }
   "Elmah.SimpleServiceProviderFactory" -> { rank=none; "Elmah.Configuration"; "Elmah.Mask" }
   "Elmah.SpeedBar" -> { rank=none; "Elmah.Mask" }
   "Elmah.SqlErrorLog" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ConnectionStringHelper"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.Mask" }
   "Elmah.SqlServerCompactErrorLog" -> { rank=none; "Elmah.ApplicationException"; "Elmah.ConnectionStringHelper"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.Mask" }
   "Elmah.StringFormatter" -> { rank=none; "Elmah.StringFormatTokenBindingHandler" }
   "Elmah.XmlFileErrorLog" -> { rank=none; "Elmah.ApplicationException"; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry"; "Elmah.ErrorXml"; "Elmah.InvariantStringArray"; "Elmah.Mask" }
   "JetBrains.Annotations.AssertionConditionAttribute" -> { rank=none; "JetBrains.Annotations.AssertionConditionType" }
   }
