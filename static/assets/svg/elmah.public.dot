digraph G {
    page="40,60"; 
    ratio=auto;
    rankdir=LR;
    fontsize=10;
   "Elmah.AccessErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.Assertions.AssertionFactory" -> { rank=none; "Elmah.Assertions.IAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.AssertionFactoryHandler" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.ComparisonAssertion" -> { rank=none; "Elmah.Assertions.ComparisonResultPredicate"; "Elmah.Assertions.DataBoundAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.ComparisonResults" -> { rank=none; "Elmah.Assertions.ComparisonResultPredicate" }
   "Elmah.Assertions.CompositeAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.DataBoundAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.IsNullAssertion" -> { rank=none; "Elmah.Assertions.DataBoundAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.JScriptAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.LogicalAssertion" -> { rank=none; "Elmah.Assertions.CompositeAssertion" }
   "Elmah.Assertions.RegexMatchAssertion" -> { rank=none; "Elmah.Assertions.DataBoundAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.StaticAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.TypeAssertion" -> { rank=none; "Elmah.Assertions.DataBoundAssertion"; "Elmah.Assertions.IContextExpression" }
   "Elmah.Assertions.UnaryNotAssertion" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.Assertions.WebDataBindingExpression" -> { rank=none; "Elmah.Assertions.IContextExpression" }
   "Elmah.ContentSyndication.Channel" -> { rank=none; "Elmah.ContentSyndication.Image"; "Elmah.ContentSyndication.TextInput" }
   "Elmah.ContentSyndication.RichSiteSummary" -> { rank=none; "Elmah.ContentSyndication.Channel" }
   "Elmah.ErrorDisplay" -> { rank=none; "Elmah.Error" }
   "Elmah.ErrorFilterConfiguration" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.ErrorFilterModule" -> { rank=none; "Elmah.Assertions.IAssertion" }
   "Elmah.ErrorJson" -> { rank=none; "Elmah.Error" }
   "Elmah.ErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLogEntry" }
   "Elmah.ErrorLogEntry" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog" }
   "Elmah.ErrorLogModule" -> { rank=none; "Elmah.ErrorLoggedEventHandler"; "Elmah.ExceptionFilterEventHandler"; "Elmah.HttpModuleBase"; "Elmah.IExceptionFiltering" }
   "Elmah.ErrorLoggedEventArgs" -> { rank=none; "Elmah.ErrorLogEntry" }
   "Elmah.ErrorLoggedEventHandler" -> { rank=none; "Elmah.ErrorLoggedEventArgs" }
   "Elmah.ErrorMailEventArgs" -> { rank=none; "Elmah.Error" }
   "Elmah.ErrorMailEventHandler" -> { rank=none; "Elmah.ErrorMailEventArgs" }
   "Elmah.ErrorMailHtmlFormatter" -> { rank=none; "Elmah.Error"; "Elmah.ErrorTextFormatter" }
   "Elmah.ErrorMailModule" -> { rank=none; "Elmah.ErrorMailEventHandler"; "Elmah.ExceptionFilterEventHandler"; "Elmah.HttpModuleBase"; "Elmah.IExceptionFiltering" }
   "Elmah.ErrorSignal" -> { rank=none; "Elmah.ErrorSignalEventHandler" }
   "Elmah.ErrorSignalEventHandler" -> { rank=none; "Elmah.ErrorSignalEventArgs" }
   "Elmah.ErrorTextFormatter" -> { rank=none; "Elmah.Error" }
   "Elmah.ErrorTweetModule" -> { rank=none; "Elmah.ExceptionFilterEventHandler"; "Elmah.HttpModuleBase"; "Elmah.IExceptionFiltering" }
   "Elmah.ErrorXml" -> { rank=none; "Elmah.Error" }
   "Elmah.ExceptionFilterEventHandler" -> { rank=none; "Elmah.ExceptionFilterEventArgs" }
   "Elmah.IExceptionFiltering" -> { rank=none; "Elmah.ExceptionFilterEventHandler" }
   "Elmah.MemoryErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.MySqlErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.OracleErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.PgsqlErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.SQLiteErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.ServiceCenter" -> { rank=none; "Elmah.ServiceProviderQueryHandler" }
   "Elmah.SqlErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.SqlServerCompactErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   "Elmah.StringFormatter" -> { rank=none; "Elmah.StringFormatTokenBindingHandler" }
   "Elmah.XmlFileErrorLog" -> { rank=none; "Elmah.Error"; "Elmah.ErrorLog"; "Elmah.ErrorLogEntry" }
   }
